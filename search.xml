<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Kotlin Scope Functions</title>
      <link href="2021/05/23/kotlin-scope-functions/"/>
      <url>2021/05/23/kotlin-scope-functions/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是Scope-Funtion-作用域函数"><a href="#什么是Scope-Funtion-作用域函数" class="headerlink" title="什么是Scope Funtion(作用域函数)"></a>什么是Scope Funtion(作用域函数)</h2><p>Kotlin 标准库包含几个函数，它们的唯一目的是在对象的上下文中执行代码块。当对一个对象调用这样的函数并提供一个 lambda 表达式时，<br>它会形成一个临时作用域。在此作用域中，可以访问该对象而无需其名称。这些函数称为作用域函数。共有以下五种：let、run、with、apply 以及 also。</p><p>这些函数基本上做了同样的事情：在一个对象上执行一个代码块。不同的是这个对象在块中如何使用，以及整个表达式的结果是什么。</p><p>下面是作用域函数的典型用法:</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token function">Person</span><span class="token punctuation">(</span><span class="token string">"Alice"</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token string">"Amsterdam"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">let</span> <span class="token punctuation">{</span>    <span class="token function">println</span><span class="token punctuation">(</span>it<span class="token punctuation">)</span>    it<span class="token punctuation">.</span><span class="token function">moveTo</span><span class="token punctuation">(</span><span class="token string">"London"</span><span class="token punctuation">)</span>    it<span class="token punctuation">.</span><span class="token function">incrementAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token function">println</span><span class="token punctuation">(</span>it<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>该例子的输出如下：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">Person(name=Alice, age=20, city=Amsterdam)Person(name=Alice, age=21, city=London)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>通过上面的例子可以看出，作用域函数虽然没有引入新的技术，但是在操作对象时，使我们的代码更加简洁易读</p><h2 id="五种作用域函数的区别"><a href="#五种作用域函数的区别" class="headerlink" title="五种作用域函数的区别"></a>五种作用域函数的区别</h2><table><thead><tr><th align="center">Function</th><th align="center">Object reference</th><th align="center">Return value</th><th align="center">Is extension function</th></tr></thead><tbody><tr><td align="center">let</td><td align="center">it</td><td align="center">Lambda result</td><td align="center">✅</td></tr><tr><td align="center">run</td><td align="center">this</td><td align="center">Lambda result</td><td align="center">✅</td></tr><tr><td align="center">run</td><td align="center">—</td><td align="center">Lambda result</td><td align="center">❌ : called without the context object</td></tr><tr><td align="center">with</td><td align="center">this</td><td align="center">Lambda result</td><td align="center">❌ : Takes the context object as an argument</td></tr><tr><td align="center">apply</td><td align="center">this</td><td align="center">Context object</td><td align="center">✅</td></tr><tr><td align="center">also</td><td align="center">it</td><td align="center">Context object</td><td align="center">✅</td></tr></tbody></table><p>上表列举了五种作用域函数的主要区别。</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kotlin </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
